module.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=3)}([function(e,t){e.exports=require("react")},function(e,t){e.exports=require("react-dom")},function(e,t){function r(){var e,t=this.parentNode,r=arguments.length;if(t)for(r||t.removeChild(this);r--;)"object"!=typeof(e=arguments[r])?e=this.ownerDocument.createTextNode(e):e.parentNode&&e.parentNode.removeChild(e),r?t.insertBefore(this.previousSibling,e):t.replaceChild(e,this)}Element.prototype.replaceWith||(Element.prototype.replaceWith=r),CharacterData.prototype.replaceWith||(CharacterData.prototype.replaceWith=r),DocumentType.prototype.replaceWith||(DocumentType.prototype.replaceWith=r)},function(e,t,r){"use strict";r.r(t);var n=r(1),o=r.n(n),s=r(0),i=r.n(s),c=(r(2),i.a.createRef||function(){var e=function(t){e.current=t};return e(null),e});class a extends i.a.Component{constructor(){super(...arguments),this.ref=c()}componentDidMount(){const e=this.props.children;this.ref.current.replaceWith(...e)}render(){return i.a.createElement("div",{ref:this.ref})}}const u=(e,t,r,n)=>{class s extends i.a.PureComponent{constructor(){super(...arguments),this.state=Object.assign({},t),this.setProps=e=>this.setState(()=>e)}render(){return i.a.createElement(e,Object.assign({},this.props,this.state))}}const a=c();o.a.render(i.a.createElement(s,{ref:a}),r,()=>n(a))};r.d(t,"registerAsWebComponent",(function(){return l}));const p=(e,t)=>class extends HTMLElement{constructor(){switch(super(),this.targetNode=null,this.propBridgeRef=null,this.props={},this.observer=null,this.setProps=e=>{var t,r;this.props=Object.assign(Object.assign({},this.props),e),t=this.propBridgeRef,r=this.props,t&&t.current&&t.current.setProps(r)},this._onReactMount=e=>{this.propBridgeRef=e,this.setProps(this.props)},this._onMutation=e=>{const t=e.reduce((e,t)=>{if("attributes"===t.type){const r=t.attributeName;e[r]=this.getAttribute(r)}return e},{});this.setProps(t)},this.props=(e=>{const t=e.getAttributeNames().reduce((t,r)=>(t[r]=e.getAttribute(r),t),{}),r=Array.from(e.childNodes).map(e=>e.cloneNode(!0));return t.children=i.a.createElement(a,null,r),t})(this),this.observer=new MutationObserver(this._onMutation),t){case"open":this.targetNode=this.attachShadow({mode:"open"});break;case"element":this.targetNode=this;break;default:this.targetNode=this.attachShadow({mode:"closed"})}u(e,this.props,this.targetNode,this._onReactMount)}connectedCallback(){this.observer.observe(this,{attributes:!0})}disconnectedCallback(){this.observer.disconnect()}},l=(e,t,r)=>{const n=p(e,r);customElements.define(t,n)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,